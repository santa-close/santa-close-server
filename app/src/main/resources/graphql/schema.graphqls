schema {
    query: Query
    mutation: Mutation
}

interface AppLocation {
    coordinate: AppCoordinate!
    id: ID!
    type: LocationType!
}

type AppAuthInfo {
    accessToken: String!
    expiredAt: DateTime!
}

type AppCoordinate {
    latitude: Float!
    longitude: Float!
}

type CategoryAppList {
    mountainDifficulty: [MountainDifficultyCategory!]!
}

type LatestMountain {
    id: ID!
    name: String!
}

type LatestRestaurantReview {
    content: String!
    id: ID!
    title: String!
}

type MountainAppLocation implements AppLocation {
    coordinate: AppCoordinate!
    id: ID!
    type: LocationType!
}

type MountainAppSummary {
    address: String!
    id: ID!
    imageUrl: String!
    locations: [RestaurantAppCoordinate!]!
    rating: Float!
    reviewCount: Int!
}

type MountainDifficultyCategory {
    code: MountainDifficulty!
    name: String!
}

type Mutation {
    "산 리뷰 등록하기"
    createMountainReview(input: CreateMountainReviewAppInput!): Boolean!
    "맛집 등록하기"
    createRestaurant(input: CreateRestaurantAppInput!): Boolean!
    "음식점 리뷰 등록하기"
    createRestaurantReview(input: CreateRestaurantReviewAppInput!): Boolean!
    "샘플 데이터"
    createSample(input: CreateSampleAppInput!): Boolean!
    "산 등록하기"
    registerMountain(input: CreateMountainAppInput!): Boolean!
    "로그인 및 회원가입"
    signIn(input: SignInAppInput!): AppAuthInfo!
}

type Query {
    "category 데이터"
    categories: CategoryAppList!
    "지도 위치 데이터"
    locations(input: LocationAppInput!): [AppLocation!]!
    "산 상세 조회"
    mountainDetail(input: MountainDetailAppInput!): Boolean!
    "산 요약 정보"
    mountainSummary(id: ID!): MountainAppSummary!
    "맛집 상세 조회"
    restaurantDetail(id: ID!): RestaurantAppDetail!
    "샘플 데이터"
    sample(input: SampleAppItemInput!): SampleAppDetail!
}

type RestaurantAppCoordinate {
    coordinate: AppCoordinate!
    id: ID!
}

type RestaurantAppDetail {
    address: String!
    foodType: [FoodType!]!
    mountains: [LatestMountain!]!
    name: String!
    restaurantRatingAverage: RestaurantRatingAverage!
    restaurantReviews: [LatestRestaurantReview!]!
}

type RestaurantAppLocation implements AppLocation {
    coordinate: AppCoordinate!
    id: ID!
    type: LocationType!
}

type RestaurantRatingAverage {
    average: Float!
    clean: Float!
    kind: Float!
    mood: Float!
    parkingSpace: Float!
    taste: Float!
    totalCount: Int!
}

type SampleAppDetail {
    name: String!
    price: Int!
    status: SampleStatus!
}

enum AppUserRole {
    USER
    VIEWER
}

enum FoodType {
    AMERICAN
    ASIA
    BAR
    CAFE
    CHINESE
    FOOD_COURT
    JAPANESE
    KOREAN
    OTHER
    PUB
    SNACK_BAR
    SOUTH_AMERICAN
}

enum LocationType {
    MOUNTAIN
    RESTAURANT
}

enum MountainDifficulty {
    EASY
    HARD
    NORMAL
}

enum MountainManagement {
    MUNICIPAL
    NATIONAL
    NORMAL
    PROVINCIAL
}

enum PriceComment {
    IS_CHEAP
    IS_EXPENSIVE
    IS_NORMAL
}

enum SampleStatus {
    CLOSE
    OPEN
}

enum SignInType {
    APPLE
    KAKAO
}

"A type representing a formatted java.time.LocalDateTime"
scalar DateTime

input AppCoordinateInput {
    latitude: Float!
    longitude: Float!
}

input CreateMountainAppInput {
    address: String!
    altitude: Int!
    images: [String!]!
    latitude: Float!
    longitude: Float!
    management: MountainManagement!
    name: String!
    postcode: String!
}

input CreateMountainReviewAppInput {
    content: String!
    difficulty: MountainDifficulty!
    images: [String!]!
    mountainId: ID!
    parking: Int!
    scenery: Int!
    title: String!
    toilet: Int!
    traffic: Int!
    trail: Int!
    tree: Int!
}

input CreateRestaurantAppInput {
    address: String!
    description: String!
    foodTypes: [FoodType!]!
    images: [String!]!
    latitude: Float!
    longitude: Float!
    mountainId: ID!
    name: String!
    postcode: String!
}

input CreateRestaurantReviewAppInput {
    content: String!
    images: [String!]!
    priceAverage: Int!
    priceComment: PriceComment!
    rating: RestaurantRatingInput!
    restaurantId: ID!
    title: String!
}

input CreateSampleAppInput {
    name: String!
    price: Int!
    status: SampleStatus!
}

input LocationAppInput {
    diagonalFrom: AppCoordinateInput!
    diagonalTo: AppCoordinateInput!
}

input MountainDetailAppInput {
    id: ID!
}

input RestaurantRatingInput {
    clean: Int!
    kind: Int!
    mood: Int!
    parkingSpace: Int!
    taste: Int!
}

input SampleAppItemInput {
    name: String
    price: Int!
}

input SignInAppInput {
    code: String!
    type: SignInType!
}