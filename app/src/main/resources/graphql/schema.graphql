schema {
  query: Query
  mutation: Mutation
}

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"authorization"
directive @auth(role: AppUserRole!) on FIELD_DEFINITION

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

interface AppLocation {
  coordinate: AppCoordinate!
  id: ID!
  type: LocationType!
}

type AppAuthInfo {
  accessToken: String!
  expiredAt: DateTime!
}

type AppCoordinate {
  latitude: Float!
  longitude: Float!
}

type CategoryAppList {
  mountainDifficulty: [MountainDifficultyCategory!]!
}

type LatestMountain {
  id: ID!
  name: String!
}

type LatestRestaurantReview {
  content: String!
  id: ID!
  title: String!
}

type MountainAppLocation implements AppLocation {
  coordinate: AppCoordinate!
  id: ID!
  type: LocationType!
}

type MountainDifficultyCategory {
  code: MountainDifficulty!
  name: String!
}

type Mutation {
  "산 리뷰 등록하기"
  createMountainReview(input: CreateMountainReviewAppInput!): Boolean! @auth(role : USER)
  "맛집 등록하기"
  createRestaurant(input: CreateRestaurantAppInput!): Boolean! @auth(role : USER)
  "음식점 리뷰 등록하기"
  createRestaurantReview(input: CreateRestaurantReviewAppInput!): Boolean! @auth(role : USER)
  "샘플 데이터"
  createSample(input: CreateSampleAppInput!): Boolean! @auth(role : USER)
  "산 등록하기"
  registerMountain(input: CreateMountainAppInput!): Boolean! @auth(role : USER)
  "로그인 및 회원가입"
  signIn(input: SignInAppInput!): AppAuthInfo!
}

type Query {
  "category 데이터"
  categories: CategoryAppList!
  "지도 위치 데이터"
  locations(input: LocationAppInput!): [AppLocation!]! @auth(role : USER)
  "산 상세 조회"
  mountainDetail(input: MountainDetailAppInput!): Boolean! @auth(role : USER)
  "맛집 상세 조회"
  restaurantDetail(id: ID!): RestaurantAppDetail! @auth(role : USER)
  "샘플 데이터"
  sample(input: SampleAppItemInput!): SampleAppDetail! @auth(role : USER)
}

type RestaurantAppDetail {
  address: String!
  foodType: [FoodType!]!
  mountains: [LatestMountain!]!
  name: String!
  restaurantRatingAverage: RestaurantRatingAverage!
  restaurantReviews: [LatestRestaurantReview!]!
}

type RestaurantAppLocation implements AppLocation {
  coordinate: AppCoordinate!
  id: ID!
  type: LocationType!
}

type RestaurantRatingAverage {
  average: Float!
  clean: Float!
  kind: Float!
  mood: Float!
  parkingSpace: Float!
  taste: Float!
  totalCount: Int!
}

type SampleAppDetail {
  name: String!
  price: Int!
  status: SampleStatus!
}

enum AppUserRole {
  USER
  VIEWER
}

enum FoodType {
  AMERICAN
  ASIA
  BAR
  CAFE
  CHINESE
  FOOD_COURT
  JAPANESE
  KOREAN
  OTHER
  PUB
  SNACK_BAR
  SOUTH_AMERICAN
}

enum LocationType {
  MOUNTAIN
  RESTAURANT
}

enum MountainDifficulty {
  EASY
  HARD
  NORMAL
}

enum MountainManagement {
  MUNICIPAL
  NATIONAL
  NORMAL
  PROVINCIAL
}

enum PriceComment {
  IS_CHEAP
  IS_EXPENSIVE
  IS_NORMAL
}

enum SampleStatus {
  CLOSE
  OPEN
}

enum SignInType {
  APPLE
  KAKAO
}

"A type representing a formatted java.time.LocalDateTime"
scalar DateTime

input AppCoordinateInput {
  latitude: Float!
  longitude: Float!
}

input CreateMountainAppInput {
  address: String!
  altitude: Int!
  images: [String!]!
  latitude: Float!
  longitude: Float!
  management: MountainManagement!
  name: String!
  postcode: String!
}

input CreateMountainReviewAppInput {
  content: String!
  difficulty: MountainDifficulty!
  images: [String!]!
  mountainId: ID!
  parking: Int!
  scenery: Int!
  title: String!
  toilet: Int!
  traffic: Int!
  trail: Int!
  tree: Int!
}

input CreateRestaurantAppInput {
  address: String!
  description: String!
  foodTypes: [FoodType!]!
  images: [String!]!
  latitude: Float!
  longitude: Float!
  mountainId: ID!
  name: String!
  postcode: String!
}

input CreateRestaurantReviewAppInput {
  content: String!
  images: [String!]!
  priceAverage: Int!
  priceComment: PriceComment!
  rating: RestaurantRatingInput!
  restaurantId: ID!
  title: String!
}

input CreateSampleAppInput {
  name: String!
  price: Int!
  status: SampleStatus!
}

input LocationAppInput {
  diagonalFrom: AppCoordinateInput!
  diagonalTo: AppCoordinateInput!
}

input MountainDetailAppInput {
  id: ID!
}

input RestaurantRatingInput {
  clean: Int!
  kind: Int!
  mood: Int!
  parkingSpace: Int!
  taste: Int!
}

input SampleAppItemInput {
  name: String
  price: Int!
}

input SignInAppInput {
  code: String!
  type: SignInType!
}